#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include "DHT.h"
#include <Wire.h>         
#include <BH1750.h>       
#include <time.h>          

const char* ssid = "PVanQuy";
const char* password = "Quydeptrai";
const char* mqtt_server = "172.20.10.3";  

#define DPIN 4         
#define DTYPE DHT11   
DHT dht(DPIN, DTYPE);

BH1750 lightMeter; 

#define DIGITAL_INPUT_PIN 5 
#define LED_PIN_1 14  
#define LED_PIN_2 12  
#define LED_PIN_3 13  

WiFiClient espClient;
PubSubClient client(espClient);

unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE (100)
char msg[MSG_BUFFER_SIZE];

const char* ntpServer = "pool.ntp.org";
const long gmtOffset_sec = 7 * 3600;  // GMT+7 
const int daylightOffset_sec = 0;

// Hàm lấy thời gian hiện tại
String getFormattedTime() {
  time_t now = time(nullptr);
  if (now < 0) {
    return "N/A";
  }
  struct tm timeinfo;
  localtime_r(&now, &timeinfo);  
  char buffer[30];
  strftime(buffer, 30, "%Y-%m-%d %H:%M:%S", &timeinfo);
  return String(buffer);
}

void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  // Cấu hình NTP để lấy thời gian
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
  Serial.println("Waiting for time sync...");
  
  // Thêm thời gian chờ cho đến khi có thời gian hợp lệ
  for (int i = 0; i < 10; i++) {
    if (time(nullptr) > 0) {
      break;
    }
    delay(1000);
    Serial.print(".");
  }

  Serial.println("\nTime synchronized");
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  
  // Chuyển payload thành chuỗi
  String message;
  for (int i = 0; i < length; i++) {
    message += (char)payload[i];
  }
  
  Serial.println(message);

  // Bật tắt LED tương ứng với tin nhắn
  if (message == "LED1_ON") {
    digitalWrite(LED_PIN_1, HIGH); 
  } else if (message == "LED1_OFF") {
    digitalWrite(LED_PIN_1, LOW);  
  } else if (message == "LED2_ON") {
    digitalWrite(LED_PIN_2, HIGH);  
  } else if (message == "LED2_OFF") {
    digitalWrite(LED_PIN_2, LOW);   
  } else if (message == "LED3_ON") {
    digitalWrite(LED_PIN_3, HIGH);  
  } else if (message == "LED3_OFF") {
    digitalWrite(LED_PIN_3, LOW);   
  } else if (message == "ON_ALL") {
    digitalWrite(LED_PIN_1, HIGH);
    digitalWrite(LED_PIN_2, HIGH);
    digitalWrite(LED_PIN_3, HIGH);
  } else if (message == "OFF_ALL") {
    digitalWrite(LED_PIN_1, LOW);
    digitalWrite(LED_PIN_2, LOW);
    digitalWrite(LED_PIN_3, LOW);
  }
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Thực hiện kết nối với tên người dùng và mật khẩu
    if (client.connect(clientId.c_str(), "quy1", "2003")) {
      Serial.println("connected");
      client.subscribe("inn");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}

void setup() {
  pinMode(BUILTIN_LED, OUTPUT);  
  pinMode(DIGITAL_INPUT_PIN, INPUT); 
  pinMode(LED_PIN_1, OUTPUT);  
  pinMode(LED_PIN_2, OUTPUT);  
  pinMode(LED_PIN_3, OUTPUT);  
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, 1888);
  client.setCallback(callback);
  dht.begin();

  Wire.begin(D3, D4);  
  if (!lightMeter.begin()) {
    Serial.println(F("Error initializing BH1750"));
  } else {
    Serial.println(F("BH1750 initialized"));
  }
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  unsigned long now = millis();
  if (now - lastMsg > 10000) { 
    lastMsg = now;

    float tc = dht.readTemperature(false);  
    float hu = dht.readHumidity();          
    float lux = lightMeter.readLightLevel();  

    int digitalValue = digitalRead(DIGITAL_INPUT_PIN);

    if (isnan(tc) || isnan(hu)) {
      Serial.println("Failed to read from DHT sensor!");
      return;
    }

    String currentTime = getFormattedTime();

    snprintf(msg, MSG_BUFFER_SIZE, "Thoigian: %s, Nhietdo: %.2f C, Doam: %.0f%%, Anhsang: %.2f Lux", currentTime.c_str(), tc, hu, lux);
    Serial.print("Publish message: ");
    Serial.println(msg);
    client.publish("outt", msg);
  }
}
